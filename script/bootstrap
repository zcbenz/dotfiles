#!/bin/bash

# Root of dotfiles
SOURCE="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/.."

# Include utils
source $SOURCE/script/bash_utils

TARGET=${1:-~}
if [ ! -d $TARGET ]; then
  fail "Invalid target: $TARGET"
  exit 1
fi

TARGET_LITERAL=$TARGET
[[ $TARGET_LITERAL == ~ ]] && TARGET_LITERAL='~' # reduce to '~'

BACKUP=`mktemp -d /tmp/dotfiles_backup_XXXXXX`
info "Old files will be put in $BACKUP"

function reuse_or_create_dir {
  mkdir "$BACKUP/$1"
  if [ ! -e "$TARGET/$1" ]; then
    mkdir "$TARGET/$1"
  elif [ ! -d "$TARGET/$1" ]; then
    mv "$TARGET/$1" "$BACKUP/$1"
    mkdir "$TARGET/$1"
  fi
}

reuse_or_create_dir bin
reuse_or_create_dir codes
if [[ $PLATFORM == 'darwin' ]]; then
  reuse_or_create_dir bin/darwin
fi
success 'Create bin and codes'

function link_and_backup {
  [ -e "$TARGET/$1" ] && mv "$TARGET/$1" "$BACKUP/$1"
  ln -s "$SOURCE/$2" "$TARGET/$1"
}

link_and_backup .vim vim/.vim
link_and_backup .vimrc vim/.vimrc
link_and_backup .custom_bashrc bash/.bashrc
link_and_backup .tools_aliases bash/.tools_aliases
link_and_backup bin/rename bin/rename
link_and_backup bin/vn bin/vn
if [[ $PLATFORM != 'cygwin' ]]; then
  link_and_backup .gitconfig git/.gitconfig
fi
if [[ $PLATFORM == 'cygwin' ]]; then
  link_and_backup bin/sudo bin/sudo
  link_and_backup bin/pbcopy bin/pbcopy
  link_and_backup bin/pbpaste bin/pbpaste
  link_and_backup bin/vcvarsall bin/vcvarsall
  link_and_backup .minttyrc misc/.minttyrc
fi
success "Link configuration files"

LASTLINE_OF_BASHRC=$(tail -n 1 "$TARGET/.bashrc" 2>/dev/null)
LASTLINE_TO_BE="source $TARGET_LITERAL/.custom_bashrc"
if [[ ! -e "$TARGET/.bashrc" ]]; then
  echo $LASTLINE_TO_BE > "$TARGET/.bashrc"
  success "Create $TARGET_LITERAL/.bashrc"
elif [[ $LASTLINE_OF_BASHRC != $LASTLINE_TO_BE ]]; then
  echo $LASTLINE_TO_BE >> "$TARGET/.bashrc"
  success "Inject $TARGET_LITERAL/.bashrc"
fi

if [[ $PLATFORM != 'cygwin' ]] && has_command sudo; then
  SUDOER_LINE="$USER  ALL=(ALL)       NOPASSWD: ALL"
  if ! sudo grep -q "$SUDOER_LINE" /etc/sudoers; then
    sudo cp /etc/sudoers $BACKUP
    sudo bash -c 'echo >> /etc/sudoers'
    sudo bash -c "echo \"$SUDOER_LINE\" >> /etc/sudoers"
    success 'Inject /etc/sudoers'
  fi
fi

if [[ $PLATFORM == 'darwin' ]] && ! has_command brew; then
  progress 'Installng Homebrew'
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$(/opt/homebrew/bin/brew shellenv)"
  success "Homebrew installed"
  brew update
fi

cd $SOURCE
git submodule sync --quiet
git submodule update --init --quiet --recursive
cd - > /dev/null

if [[ $PLATFORM == 'darwin' ]]; then
  progress 'Installing other useful tools'
  has_command tree || cross_install tree
  has_command wget || cross_install wget
  has_command ohcount || cross_install ohcount
  has_command gsed || cross_install gnu-sed
  has_command ag || cross_install the_silver_searcher
  has_command autojump || cross_install autojump
  has_command realpath || cross_install coreutils
  has_command cmake || cross_install cmake
  has_command ccache || cross_install ccache
  success "Tools installed"
elif [[ $PLATFORM == 'linux-gnu' ]]; then
  progress 'Installing system tools'
  has_command tree || cross_install tree
  has_command vim || cross_install vim
  has_command ag || cross_install silversearcher-ag
  has_command autojump || cross_install autojump
  has_command cmake || cross_install cmake
  has_command ccache || cross_install ccache

  if [[ $OS == 'Ubuntu' ]]; then
    has_command ohcount || cross_install ohcount
    has_command g++ || cross_install build-essential
  fi
  success "Tools installed"
elif [[ $PLATFORM == 'cygwin' ]]; then
  bash $SOURCE/script/create_windows_symlinks $TARGET
  success 'Create convenient symbol links'
fi

if has_command sudo; then
  cp /etc/hosts $BACKUP
  bash $SOURCE/script/update_hosts $SOURCE/etc/hosts
  success 'Update hosts'

  if [[ $PLATFORM == 'linux-gnu' ]]; then
    source "$SOURCE/script/solarize" light
  fi
fi

source "$TARGET/.custom_bashrc"
success 'Load new environment'

exit 0
